// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var Idea, IdeaView, Ideas, IdeasView, UnpopularIdeas, _ref, _ref1, _ref2, _ref3, _ref4;

    Idea = (function(_super) {
      __extends(Idea, _super);

      function Idea() {
        _ref = Idea.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Idea.prototype.idAttribute = "_id";

      Idea.prototype.defaults = function() {
        return {
          title: "none set"
        };
      };

      Idea.prototype.initialize = function() {
        if (!this.get("title")) {
          return this.set({
            title: this.defaults().title
          });
        }
      };

      Idea.prototype.urlRoot = "/ideas";

      return Idea;

    })(Backbone.Model);
    IdeaView = (function(_super) {
      __extends(IdeaView, _super);

      function IdeaView() {
        _ref1 = IdeaView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      IdeaView.prototype.tagtitle = "li";

      IdeaView.prototype.initialize = function() {
        _.bindAll(this, "render", "remove");
        this.model.bind("change", this.render);
        this.model.bind("destroy", this.remove);
        return this.template = _.template($("#idea-template").html());
      };

      IdeaView.prototype.events = {
        "click .destroy": "clear",
        "dblclick .title": "edit",
        "keypress .editBox": "updateIdea"
      };

      IdeaView.prototype.clear = function() {
        return this.model.destroy();
      };

      IdeaView.prototype.edit = function() {
        var oldTitle;

        oldTitle = this.model.get("title");
        this.$el.find(".title").html(_.template("<input class=\"editBox\" type=\"text\" value=\"<%= oldTitle %>\">"));
        return this.$el.find("input").focus();
      };

      IdeaView.prototype.updateIdea = function(e) {
        if (e.keyCode === 13) {
          if ((this.$el.find("input").val().length < 50) && (this.$el.find("input").val().length > 2)) {
            this.model.set("title", $(".editBox").val());
            this.model.save();
            return;
          }
          return alert("Ideas must be between 3 and 49 characters in length. Try again.");
        }
      };

      IdeaView.prototype.render = function() {
        var renderedContent;

        renderedContent = this.template(this.model.toJSON());
        $(this.el).html(renderedContent);
        return this;
      };

      return IdeaView;

    })(Backbone.View);
    Ideas = (function(_super) {
      __extends(Ideas, _super);

      function Ideas() {
        _ref2 = Ideas.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      Ideas.prototype.model = Idea;

      Ideas.prototype.url = "/ideas";

      return Ideas;

    })(Backbone.Collection);
    IdeasView = (function(_super) {
      __extends(IdeasView, _super);

      function IdeasView() {
        _ref3 = IdeasView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      IdeasView.prototype.initialize = function() {
        _.bindAll(this, "render");
        this.template = _.template($("#ideas-template").html());
        this.collection.bind("reset", this.render);
        return this.collection.bind("change", this.render);
      };

      IdeasView.prototype.render = function() {
        var $ideas, collection;

        $ideas = void 0;
        collection = void 0;
        $(this.el).html(this.template);
        $ideas = this.$(".ideas");
        this.collection.each(function(idea) {
          var ideaItem;

          ideaItem = new IdeaView({
            model: idea,
            collection: collection
          });
          return $ideas.append(ideaItem.render().el);
        });
        return this;
      };

      IdeasView.prototype.events = {
        "keypress .inputBox": "newIdea"
      };

      IdeasView.prototype.newIdea = function(e) {
        var newIdea;

        if (e.keyCode === 13) {
          if (($(".inputBox").val().length < 50) && ($(".inputBox").val().length > 2)) {
            newIdea = new Idea();
            newIdea.set("title", $(".inputBox").val());
            newIdea.save();
            $(".inputBox").val("");
            return this.collection.fetch();
          } else {
            return alert("Ideas must be between 3 and 49 characters in length. Try again.");
          }
        }
      };

      return IdeasView;

    })(Backbone.View);
    UnpopularIdeas = (function(_super) {
      __extends(UnpopularIdeas, _super);

      function UnpopularIdeas() {
        _ref4 = UnpopularIdeas.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      UnpopularIdeas.prototype.routes = {
        "": "home"
      };

      UnpopularIdeas.prototype.initialize = function() {
        var ideas;

        ideas = new Ideas();
        ideas.fetch();
        return this.stream = new IdeasView({
          collection: ideas
        });
      };

      UnpopularIdeas.prototype.home = function() {
        return $("#container").append(this.stream.render().el);
      };

      return UnpopularIdeas;

    })(Backbone.Router);
    window.App = new UnpopularIdeas();
    return Backbone.history.start();
  });

}).call(this);
