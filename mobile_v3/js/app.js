// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var _ref, _ref1, _ref2, _ref3, _ref4;

    window.Place = (function(_super) {
      __extends(Place, _super);

      function Place() {
        _ref = Place.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Place.prototype.idAttribute = "_id";

      Place.prototype.initialize = function() {
        return this.set({
          title: this.get("title")
        });
      };

      Place.prototype.validate = function(attrs, optns) {
        if (!this.title) {
          return "Title is required";
        } else if (!this.lat) {
          return "Latitude is required";
        } else if (!this.lng) {
          return "Longitude is required";
        }
      };

      Place.prototype.urlRoot = "/places";

      return Place;

    })(Backbone.Model);
    window.Places = (function(_super) {
      __extends(Places, _super);

      function Places() {
        _ref1 = Places.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Places.prototype.model = Place;

      Places.prototype.url = "/places";

      return Places;

    })(Backbone.Collection);
    window.PlaceView = (function(_super) {
      __extends(PlaceView, _super);

      function PlaceView() {
        _ref2 = PlaceView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      PlaceView.prototype.tagtitle = "form";

      PlaceView.prototype.initialize = function() {
        _.bindAll(this, "render", "remove");
        this.model.bind("change", this.render);
        this.model.bind("destroy", this.remove);
        return this.template = _.template($("#gpsCtrlTmpl").html());
      };

      PlaceView.prototype.events = {
        "click #send": "updatePlace"
      };

      PlaceView.prototype.clear = function() {
        return this.model.destroy();
      };

      PlaceView.prototype.edit = function() {
        var oldTitle;

        return oldTitle = this.model.get("title");
      };

      PlaceView.prototype.updatePlace = function(e) {
        return this.model.save();
      };

      PlaceView.prototype.render = function() {
        var renderedContent;

        renderedContent = this.template(this.model.toJSON());
        $(this.el).html(renderedContent);
        return this;
      };

      return PlaceView;

    })(Backbone.View);
    window.PlacesView = (function(_super) {
      __extends(PlacesView, _super);

      function PlacesView() {
        _ref3 = PlacesView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      PlacesView.prototype.initialize = function() {
        _.bindAll(this, "render");
        this.template = _.template($("#places-template").html());
        this.collection.bind("reset", this.render);
        return this.collection.bind("change", this.render);
      };

      PlacesView.prototype.render = function() {
        var $places, collection;

        $places = void 0;
        collection = void 0;
        $(this.el).html(this.template);
        $places = this.$(".places");
        this.collection.each(function(place) {
          var placeItem;

          placeItem = new PlaceView({
            model: place,
            collection: collection
          });
          return $places.append(placeItem.render().el);
        });
        return this;
      };

      PlacesView.prototype.events = {
        "keypress .inputBox": "newPlace"
      };

      PlacesView.prototype.newPlace = function(e) {
        var newPlace;

        if (e.keyCode === 13) {
          if (($(".inputBox").val().length < 50) && ($(".inputBox").val().length > 2)) {
            newPlace = new Place();
            newPlace.set("title", $(".inputBox").val());
            newPlace.save();
            $(".inputBox").val("");
            return this.collection.fetch();
          } else {
            return alert("Places must be between 3 and 49 characters in length. Try again.");
          }
        }
      };

      return PlacesView;

    })(Backbone.View);
    window.UnpopularPlaces = (function(_super) {
      __extends(UnpopularPlaces, _super);

      function UnpopularPlaces() {
        _ref4 = UnpopularPlaces.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      UnpopularPlaces.prototype.routes = {
        "": "home"
      };

      UnpopularPlaces.prototype.initialize = function() {
        var places;

        places = new Places();
        places.fetch();
        return this.stream = new PlacesView({
          collection: places
        });
      };

      UnpopularPlaces.prototype.home = function() {
        return $("#container").append(this.stream.render().el);
      };

      return UnpopularPlaces;

    })(Backbone.Router);
    window.App = new UnpopularPlaces();
    return Backbone.history.start();
  });

}).call(this);
